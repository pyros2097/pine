class BoolLiteral
  value: Bool

class NumberLiteral
  value: Number

class StringLiteral
  value: String

class TypeParseError
  nodeType: String
  message: String
  requireType: String

func (e *ASTParseException) Error() string {
  if len(e.AllowedTypes) > 0 {
    return fmt.Sprintf("Invalid node type, allowed types are: %s", strings.Join(e.AllowedTypes, ", "))
  } else {
    return e.Message
  }
}

func checkASTNodeType(nodeType string, allowedTypes []string, node interface{}) error {
  found := false
  for _, v := range allowedTypes {
    if node != nil && v == reflect.TypeOf(node).Elem().Name() {
      found = true
      break
    }
  }
  if !found {
    return errors.New(&ASTParseException{
      NodeType:     nodeType,
      AllowedTypes: allowedTypes,
    })
  } else {
    return nil
  }
}