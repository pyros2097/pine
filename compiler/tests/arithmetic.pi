module main

type Direction enum (
  Left | Right
)

type Position enum (
  Top | Bottom | Left | Right
)

type User struct (
  name    string
  setName (v string)
)

const createUser = (a string, b string) => {
  a := {
    name: "",
    "setName": ""
  }
  return
}

const User = (name string, callback (age (g string))) => {
  fullName := "Mr. ${name}"
  //return {
  //  name: name,
  //  fullName: fullName,
  //  setName: proc(v string) {
  //    name = v
  //  }
  //}
}

const fullName = () string => {
  ////name, fullName, setName := User(name: "123")
  // name := u.name 
  map := {
    "123": "123",
    "444": {
      "444": "444"
    },
    "test": u.name,
  }
  return u.name + " " + u.age
}

const newState = (value string) => {
  // return {
  //  value,
  //  setState: proc(newValue string) {
  //    name = newValue;
  //  }
  //}
}

const render = () => {
  //value, setValue := newState(value: "test")
}

// TODO: This () doesn't let jsx to be parsed
const Counter = (a int, b int) int =>  {
  return <View>
      <View>
        <Text>
        Hello
        </Text>
      </View>
      <View>
        <Text>
        Hello
        </Text>
      </View>
    </View>
}

const adder = (a int, b int) int => {
  //if a < b {
  //  return a - b + b
  //}
  return a + b
}

test "for equal or not equal" {
  @assert 1 == 1
  @assert 2 == 2
  @assert 4 == 4
  @assert 3 != 13
}

